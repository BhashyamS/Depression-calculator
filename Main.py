# -*- coding: utf-8 -*-
"""Copy of Capstone2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f0XnEmDrXLZ7uM-VbXZ1Hj5cFH75Q57O
"""

#Importing required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

depression=pd.read_csv('depression.csv',header=None)
depression.head()

depression.shape

depression=depression.replace([np.inf, -np.inf], np.nan)
depression=depression.dropna()

depression.shape

data=depression.values

from imblearn.over_sampling import SMOTE
from sklearn.preprocessing import LabelEncoder
from collections import Counter
#Splitting the dataset into input features and target variable
X, y = data[:, :-1], data[:, -1]
#Label encoding the target variable
Ly=LabelEncoder()
y = Ly.fit_transform(y)

Ly.classes_

from sklearn.model_selection import train_test_split,cross_val_score
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify=y,random_state = 42)

#Check the shape of X_train and X_test
X_train.shape, X_test.shape

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
X_train = pd.DataFrame(X_train)
X_test = pd.DataFrame(X_test)

"""Before applying SMOTE -"""

#Summarizing the distribution
counter = Counter(y_train)
for keys,values in counter.items():
	percent = values/ len(y) * 100
	print('Class=%d, n=%d (%.3f%%)' % (keys, values, percent))

#Plotting the distribution
plt.bar(counter.keys(), counter.values())

"""Applying SMOTE on training dataset-"""

#Transforming the training dataset
oversample = SMOTE(random_state=42)
X_train, y_train = oversample.fit_resample(X_train, y_train)

#Summarizing the distribution
counter = Counter(y_train)
for keys,values in counter.items():
	percent = values/ len(y) * 100
	print('Class=%d, n=%d (%.3f%%)' % (keys, values, percent))

#Plotting the distribution
plt.bar(counter.keys(), counter.values())

"""Model Creation"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

from sklearn.metrics import classification_report,roc_curve

"""Random Forest"""

#Random Forest
rfc = RandomForestClassifier(n_estimators=150)
rfc.fit(X_train, y_train)

rfc_pred = rfc.predict(X_test)
print(classification_report(y_test,rfc_pred))

x=rfc_pred
y=y_test
sns.distplot(x, hist = False, color = 'r', label = 'Predicted Values')
sns.distplot(y, hist = False, color = 'g', label = 'Actual Values')
plt.title('Random Forest')
plt.xlabel('Values')
plt.ylabel('Frequency')
plt.legend()

"""Saving the model with maximum efficiency and generating random test cases for prediction:"""

def testcases():
    # get random answers for the Depression 14 questions
    qaAnswers = []
    for i in range(1, 15):
        qaAnswers.append(np.random.randint(0, 4)) # random values from 0 to 3
    # get random answers for TIPI1 to TIPI10 questions
    tipiAnswers = []
    for i in range(1, 11):
        tipiAnswers.append(np.random.randint(1, 8)) # random values from 1 to 7

    education = np.random.randint(1, 5) # random values from 1 to 4
    urban = np.random.randint(1, 4) # random values from 1 to 3
    gender = np.random.randint(1, 4) # random values from 1 to 3
    religion = np.random.randint(1, 13) # random values from 1 to 12
    orientation=np.random.randint(1, 6) # random values from 1 to 5
    race = np.random.randint(1, 8) # random values from 1 to 7
    voted = np.random.randint(1, 3) # random values from 1 to 2
    married = np.random.randint(1, 4) # random values from 1 to 3
    familysize = np.random.randint(1, 21) # random values from 1 to 20
    age_group = np.random.randint(1, 7) # random values from 1 to 6

    return np.array([*qaAnswers, *tipiAnswers, education, urban, gender, religion, orientation, race, voted, married, familysize, age_group])

for i in range(1, 10):
    values = testcases()
    values_scaled = scaler.transform([values])

    print(f'*********** Iteration {i} *************')
    print(f'Test Values: {values}')
    print(f'Prediction ===> {Ly.inverse_transform([rfc.predict(values_scaled)])}')
    print(f'-------------------------------------------------------------\n')

#saving the trained model
import pickle

data={"model": rfc,"labels":Ly}
with open('saved_model.pkl','wb') as file:
  pickle.dump(data,file)

"""------ Run from here -----"""

# loading the saved model
with open('saved_model.pkl','rb') as file:
  data=pickle.load(file)

model=data["model"]
Ly=data["labels"]

for i in range(1, 10):
    values = testcases()
    values_scaled = scaler.transform([values])

    print(f'*********** Iteration {i} *************')
    print(f'Test Values: {values}')
    print(f'Prediction ===> {Ly.inverse_transform([model.predict(values_scaled)])}')
    print(f'-------------------------------------------------------------\n')

!pip install -q streamlit

!./ngrok authtokens 29vr8YhWZ9CDHrUq2kr0CpUA0e8_6ik4hU5GjJZeAYagTH5i4

!pip install pyngrok

from pyngrok import ngrok
public_url = ngrok.connect(port='8501')
public_url

# Commented out IPython magic to ensure Python compatibility.
# %%writefile streamlit_app.py
# import streamlit as st
# import pandas as pd
# import joblib
# 
# st.title('Depression Scaler')
# st.subheader('Scaler Questions')
# 
# Q1 = st.selectbox("I couldn't seem to experience any positive feeling at all",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# Q2 = st.selectbox("I just couldn't seem to get going",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# Q3 = st.selectbox("I felt that I had nothing to look forward to",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# Q4 = st.selectbox("I felt sad and depressed",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# Q5 = st.selectbox("I felt that I had lost interest in just about everything",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# Q6 = st.selectbox("I felt I wasn't worth much as a person",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# Q7 = st.selectbox("I felt that life wasn't worthwhile",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# Q8 = st.selectbox("I couldn't seem to get any enjoyment out of the things I did",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# Q9 = st.selectbox("I felt down-hearted and blue",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# Q10 = st.selectbox("I was unable to become enthusiastic about anything",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# Q11 = st.selectbox("I felt I was pretty worthless",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# Q12 = st.selectbox("I could see nothing in the future to be hopeful about",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# Q13 = st.selectbox("I felt that life was meaningless",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# Q14 = st.selectbox("I found it difficult to work up the initiative to do things",["Did not apply to me at all", "Applied to me to some degree, or some of the time", "Applied to me to a considerable degree, or a good part of the time", "Applied to me very much, or most of the time"])
# 
# st.subheader('10 Personality Questions')
# 
# TIP1 = st.selectbox("I see myself as extraverted and enthusiastic",["Disagree strongly", "Disagree moderately", "Disagree a little", "Neither agree nor disagree", "Agree a little", "Agree moderately", "Agree strongly"])
# 
# TIP2 = st.selectbox("I see myself as critical and quarrelsome",["Disagree strongly","Disagree moderately","Disagree a little","Neither agree nor disagree","Agree a little","Agree moderately","Agree strongly"])
# 
# TIP3 = st.selectbox("I see myself as dependable and self- disciplined",["Disagree strongly","Disagree moderately","Disagree a little","Neither agree nor disagree","Agree a little","Agree moderately","Agree strongly"])
# 
# TIP4 = st.selectbox("I get anxious and easily upset",["Disagree strongly","Disagree moderately","Disagree a little","Neither agree nor disagree","Agree a little","Agree moderately","Agree strongly"])
# 
# TIP5 = st.selectbox("I am open to new experiences, complex",["Disagree strongly","Disagree moderately","Disagree a little","Neither agree nor disagree","Agree a little","Agree moderately","Agree strongly"])
# 
# TIP6 = st.selectbox("I see myself as reserved and quiet",["Disagree strongly","Disagree moderately","Disagree a little","Neither agree nor disagree","Agree a little","Agree moderately","Agree strongly"])
# 
# TIP7 = st.selectbox("I see myself as sympathetic and warm",["Disagree strongly","Disagree moderately","Disagree a little","Neither agree nor disagree","Agree a little","Agree moderately","Agree strongly"])
# 
# TIP8 = st.selectbox("I see myself as disorganized and careless",["Disagree strongly","Disagree moderately","Disagree a little","Neither agree nor disagree","Agree a little","Agree moderately","Agree strongly"])
# 
# TIP9 = st.selectbox("I see myself as calm and emotionally stable",["Disagree strongly","Disagree moderately","Disagree a little","Neither agree nor disagree","Agree a little","Agree moderately","Agree strongly"])
# 
# TIP10 = st.selectbox("I see myself as conventional and uncreative",["Disagree strongly","Disagree moderately","Disagree a little","Neither agree nor disagree","Agree a little","Agree moderately","Agree strongly"])
# 
# st.subheader('Extra information')
# 
# Education = st.selectbox("How much education have you completed?", ["Less than high school","High school","University degree","Graduate degree"])
# 
# Urban = st.selectbox("What type of area did you live when you were a child?", ["Rural","Suburban","Urban"])
# 
# Gender = st.selectbox("What is your gender?", ["Male","Female","Other"])
# 
# Religion = st.selectbox("What is your religion?", ["Agnostic","Atheist","Buddhist","Christian (Catholic)","Christian (Mormon)","Christian (Protestant)","Christian (Other)","Hindu","Jewish","Muslim","Sikh","Other"])
# 
# Orientation = st.selectbox("What is your sexual orientation?", ["Heterosexual","Bisexual","Homosexual","Asexual","Other"])
# 
# Race = st.selectbox("What is your race?", ["Asian","Arab","Black","Indigenous Australian","Native American","White","Other"])
# 
# Voted = st.selectbox("Have you voted in the national elections in the past year?", ["Yes","No"])
# 
# Married = st.selectbox("What is your marital status?", ["Never married","Currently married","Previously married"])
# 
# Family = st.number_input("Including you, how many children did your mother have?", min_value=1, max_value=13)
# 
# AgeGroup = st.selectbox("Which age class do you belong to?", ["Under 10","Primary Children","Secondary Children","Adults","Elder Adults","Older People"])
# 
# def qoptions(value):
#     if value =='Did not apply to me at all':
#         return 1
#     if  value=='Applied to me to some degree, or some of the time':
#         return 2
#     if value=='Applied to me to a considerable degree, or a good part of the time':
#         return 3
#     if value=='Applied to me very much, or most of the time':
#         return 4
# 
# def tipoptions(value):
#     if value =='Disagree strongly':
#         return 1
#     if  value=='Disagree moderately':
#         return 2
#     if value=='Disagree a little':
#         return 3
#     if value=='Neither agree nor disagree':
#         return 4
#     if value=='Agree a little':
#         return 5
#     if value=='Agree moderately':
#         return 6
#     if value=='Agree strongly':
#         return 7
# 
# def education(value):
#     if value == 'Less than high school':
#       return 1
#     if value=='High school':
#       return 2
#     if value=='University degree':
#       return 3
#     if value=='Graduate degree':
#       return 4
# 
# def urban(value):
#     if value == 'Rural':
#       return 1
#     if value=='Suburban':
#       return 2
#     if value=='Urban':
#       return 3
# 
# def gender(value):
#     if value == 'Male':
#       return 1
#     if value=='Female':
#       return 2
#     if value=='Other':
#       return 3
# 
# def religion(value):
#     if value =='Agnostic':
#         return 1
#     if  value=='Atheist':
#         return 2
#     if value=='Buddhist':
#         return 3
#     if value=='Christian (Catholic)':
#         return 4
#     if value=='Christian (Mormon)':
#         return 5
#     if value=='Christian (Protestant)':
#         return 6
#     if value=='Christian (Other)':
#         return 7
#     if value=='Hindu':
#         return 8
#     if value=='Jewish':
#         return 9
#     if value=='Muslim':
#         return 10
#     if value=='Sikh':
#         return 11
#     if value=='Other':
#         return 12
# 
# def orientation(value):
#     if value =='Heterosexual':
#         return 1
#     if  value=='Bisexual':
#         return 2
#     if value=='Homosexual':
#         return 3
#     if value=='Asexual':
#         return 4
#     if value=='Other':
#         return 5
# 
# def race(value):
#     if value =='Asian':
#         return 1
#     if  value=='Arab':
#         return 2
#     if value=='Black':
#         return 3
#     if value=='Indigenous Australian':
#         return 4
#     if value=='Native American':
#         return 5
#     if value=='White':
#         return 6
#     if value=='Other':
#         return 7
# 
# def voted(value):
#     if value=='Yes':
#       return 1
#     if value =='No':
#       return 2
# 
# def married(value):
#     if value=='Never married':
#       return 1
#     if value =='Currently married':
#       return 2
#     if value =='Previously married':
#       return 3
# 
# def ageClass(value):
#     if value =='Under 10':
#         return 1
#     if  value=='Primary Children':
#         return 2
#     if value=='Secondary Children':
#         return 3
#     if value=='Adults':
#         return 4
#     if value=='Elder Adults':
#         return 5
#     if value =='Older People':
#         return 6
# 
# df_pred = pd.DataFrame([[Q1,Q2, Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10,Q11,Q12,Q13,Q14,TIP1,TIP2,TIP3,TIP4,TIP5,TIP6,TIP7,TIP8,TIP9,TIP10,Education,Urban,Gender,Religion,Orientation,Race,Voted,Married,Family,AgeGroup]],
# columns= ['Q1','Q2','Q3','Q4','Q5','Q6','Q7','Q8','Q9','Q10','Q11','Q12','Q13','Q14','TIP1','TIP2','TIP3','TIP4','TIP5','TIP6','TIP7','TIP8','TIP9','TIP10','Education','Urban','Gender','Religion','Orientation','Race','Voted','Married','Family','AgeGroup'])
# 
# df_pred['Q1'] = df_pred['Q1'].apply(qoptions)
# df_pred['Q2'] = df_pred['Q2'].apply(qoptions)
# df_pred['Q3'] = df_pred['Q3'].apply(qoptions)
# df_pred['Q4'] = df_pred['Q4'].apply(qoptions)
# df_pred['Q5'] = df_pred['Q5'].apply(qoptions)
# df_pred['Q6'] = df_pred['Q6'].apply(qoptions)
# df_pred['Q7'] = df_pred['Q7'].apply(qoptions)
# df_pred['Q8'] = df_pred['Q8'].apply(qoptions)
# df_pred['Q9'] = df_pred['Q9'].apply(qoptions)
# df_pred['Q10'] = df_pred['Q10'].apply(qoptions)
# df_pred['Q11'] = df_pred['Q11'].apply(qoptions)
# df_pred['Q12'] = df_pred['Q12'].apply(qoptions)
# df_pred['Q13'] = df_pred['Q13'].apply(qoptions)
# df_pred['Q14'] = df_pred['Q14'].apply(qoptions)
# df_pred['TIP1'] = df_pred['TIP1'].apply(tipoptions)
# df_pred['TIP2'] = df_pred['TIP2'].apply(tipoptions)
# df_pred['TIP3'] = df_pred['TIP3'].apply(tipoptions)
# df_pred['TIP4'] = df_pred['TIP4'].apply(tipoptions)
# df_pred['TIP5'] = df_pred['TIP5'].apply(tipoptions)
# df_pred['TIP6'] = df_pred['TIP6'].apply(tipoptions)
# df_pred['TIP7'] = df_pred['TIP7'].apply(tipoptions)
# df_pred['TIP8'] = df_pred['TIP8'].apply(tipoptions)
# df_pred['TIP9'] = df_pred['TIP9'].apply(tipoptions)
# df_pred['TIP10'] = df_pred['TIP10'].apply(tipoptions)
# df_pred['Education'] = df_pred['Education'].apply(education)
# df_pred['Urban'] = df_pred['Urban'].apply(urban)
# df_pred['Gender'] = df_pred['Gender'].apply(gender)
# df_pred['Religion'] = df_pred['Religion'].apply(religion)
# df_pred['Orientation'] = df_pred['Orientation'].apply(orientation)
# df_pred['Race'] = df_pred['Race'].apply(race)
# df_pred['Voted'] = df_pred['Voted'].apply(voted)
# df_pred['Married'] = df_pred['Married'].apply(married)
# df_pred['AgeGroup'] = df_pred['AgeGroup'].apply(ageClass)
# 
# df_pred = df_pred[:].values
# st.markdown('##')
# ok=st.button('Predict')
# st.markdown('##')
# if ok:
#     model = joblib.load('trained_model.sav')
#     prediction = model.predict(df_pred)
#     st.write(prediction)
# 
# 
# 
#

if(prediction==0):
        st.write('<p>Level Predicted: <b style="color:#8B0001">Extremely Severe</b></p>',unsafe_allow_html=True)
    if(prediction==4):
        st.write('<p>Level Predicted: <b style="color:#B12E21">Severe</b></p>',unsafe_allow_html=True)
    if(prediction==2):
        st.write('<p>Level Predicted: <b style="color:#83D475">Moderate</b></p>',unsafe_allow_html=True)
    if(prediction==1):
        st.write('<p>Level Predicted: <b style="color:#57C84D">Mild</b></p>',unsafe_allow_html=True)
    if(prediction==3):
        st.write('<p>Level Predicted: <b style="color:#2EB62C">Normal</b></p>',unsafe_allow_html=True)

primaryColor = "#E694FF"
backgroundColor = "#00172B"
secondaryBackgroundColor = "#0083B8"
textColor = "#DCDCDC"
font = "sans-serif"

!streamlit run /content/streamlit_app.py & npx localtunnel --port 8501
